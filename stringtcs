def dp(s, substrings, memo):
    # Check if the result is already memoized
    if s in memo:
        return memo[s]

    max_removals = 0
    # Iterate over all substrings
    for sub in substrings:
        start = s.find(sub)  # Find the first occurrence of the substring
        while start != -1:  # Loop until no more occurrences
            # Create a new string by removing the found substring
            new_s = s[:start] + s[start + len(sub):]
            # Recursively calculate the number of removals
            max_removals = max(max_removals, 1 + dp(new_s, substrings, memo))
            # Find the next occurrence of the substring
            start = s.find(sub, start + 1)

    # Store the result in the memoization dictionary
    memo[s] = max_removals
    return max_removals


def main():
    # Input the number of substrings
    n = int(input("Enter the number of substrings: "))
    substrings = [input("Enter substring: ").strip() for _ in range(n)]
    # Input the main string
    main_string = input("Enter the main string: ").strip()

    # Initialize the memoization dictionary
    memo = {}
    # Calculate and print the result
    print(dp(main_string, substrings, memo))


if __name__ == "__main__":
    main()
